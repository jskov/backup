# From https://help.github.com/en/articles/workflow-syntax-for-github-actions
# Find actions in
#  https://github.com/actions
#  https://github.com/features/actions

# https://github.com/marketplace/actions/setup-graalvm-environment


# Gradle check does not return error on test failures.
# This allows test report to be collected before checking for success

name: Build and run tests


# Should work with both push and schedule, as per below, but does not.
# https://github.community/t5/GitHub-Actions/Multiple-event-triggers-with-config/m-p/33258

on:
  push
#  schedule:
#      - cron: '28 11 * * *'

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-18.04
    
    env:
      runs_release: ${{ contains(github.ref, 'refs/tags') }}
    
    steps:

    - name: Env
      run: env|sort

    - name: On any push
      run: echo "On any push ${{github.event}} ${{github.event_name}} ${{github.ref}} ${{env.runs_release}}"
       
    - name: Only on tags
      if: env.runs_release
      run: echo "Only on tag ${{github.ref}} ${{github.event_name}}"

    - uses: actions/checkout@v1
    - uses: actions/setup-java@v1
      with:
        java-version: '11.0.x'
        architecture: x64

    - name: Build and run tests
#      run: ./gradlew check
      run: ./gradlew jar
      
    - name: Show
      run: ls -l build/libs

    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: test-report
        path: build/reports

#    - name: Check test results
#      run: test -f build/all-tests-passed

    - name: Install GraalVM native-image
      uses: jskov/setup-graalvm-linux@19.3.0
      if: contains(github.ref, 'refs/tags')
      run: gu install native-image
    
    - name: Build native executable
      if: contains(github.ref, 'refs/tags')
      run: ./gradlew --no-daemon --console plain buildNative -s

    - name: Create Release
      if: contains(github.ref, 'refs/tags')
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      if: contains(github.ref, 'refs/tags')
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/backup
        asset_name: backup
        asset_content_type: application/octet-stream
        