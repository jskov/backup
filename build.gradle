plugins {
    id 'eclipse'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'org.gradle.crypto.checksum' version '1.1.0'
}

import org.gradle.crypto.checksum.Checksum

ext {
	successMarker = project.file("build/all-tests-passed")
}

def declaredVersion = System.getenv("GITHUB_REF")
if (declaredVersion != null && declaredVersion.startsWith("refs/tags/")) {
	rootProject.version = declaredVersion.substring(10)
} else {
	project.version = "1-SNAPSHOT"
}
println "Builds version $version"


group = "dk.mada.backup"

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.slf4j:slf4j-jdk14:1.8.0-beta4'
	implementation 'org.apache.commons:commons-compress:1.20'
	implementation "com.beust:jcommander:1.81"

    testImplementation "org.assertj:assertj-core:3.19.0"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
}

task makeActionsDockerImage() {
	doFirst {
		copy {
			into "build/actions-docker"
			from "src/actions"
			from ("src/test/data/gpghome") {
				include "*.asc"
			}
		}
	 	project.exec {
			commandLine("podman", "build", "-t", "actions-backup", "build/actions-docker")
		}
	}
}

task prepareActionsGpgTestHome() {
	doFirst {
		project.mkdir("build/actions-gpg-home")
	 	project.exec {
			commandLine("gpg", "--homedir", "build/actions-gpg-home", "--import", "src/test/data/gpghome/exported-secret-key.asc")
		}
	 	project.exec {
			commandLine("gpg", "--homedir", "build/actions-gpg-home", "--import-ownertrust", "src/test/data/gpghome/exported-owner-trust.asc")
		}
	}
}

task makeSuccessMarker() {
	doFirst {
		project.mkdir("build")
		successMarker.createNewFile()
	}
}

task acceptTest(type: Test) {
	dependsOn(makeSuccessMarker)
	dependsOn(prepareActionsGpgTestHome)
    useJUnitPlatform {
  	    includeTags "accept"
    }
    ignoreFailures = true
    forkEvery = 1

    afterTest { td, tr ->
		if (tr.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
			successMarker.delete()
		}
    }
}

test {
	dependsOn(makeSuccessMarker)
	dependsOn(prepareActionsGpgTestHome)
    useJUnitPlatform {
        excludeTags "accept"
    }  
    ignoreFailures = true

    afterTest { td, tr ->
		if (tr.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
			successMarker.delete()
		}
    }
}

acceptTest.shouldRunAfter("test")
tasks.check.dependsOn(acceptTest)

jar {
	manifest {
		attributes(
			'Git-Hash' : (System.getenv('BUILD_SOURCEVERSION') ?: "no-version"),
			'Implementation-Version' : project.version,
			'Main-Class' : "dk.mada.backup.cli.CliMain"
		)
	}
	archiveBaseName = "backup"
}

shadowJar {
	classifier = null
	archiveFileName = "backup-shadow.jar"
}

sourceCompatibility = 11
targetCompatibility = 11

tasks.clean { delete("dist") }

tasks.eclipseClasspath.dependsOn("cleanEclipseClasspath")


task buildNative(type: Exec, dependsOn: jar) {
	doFirst {
		project.delete("build/backup")
	}
	commandLine 'native-image', '-cp', sourceSets.main.getRuntimeClasspath().getAsPath(), "dk.mada.backup.cli.CliMain", "build/backup"
}
