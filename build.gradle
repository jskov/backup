plugins {
    id 'eclipse'
    id 'jacoco'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'

    id 'dk.mada.style' version '1.0.3'
    id 'dk.mada.reproducible' version '1.0.2'
}

interface Injected {
    @Inject //@javax.inject.Inject
    ExecOperations getExecOps()
    @Inject FileSystemOperations getFs()
}

group "${groupId}"

repositories {
    repositories {
        maven { url = uri("https://plugins.gradle.org/m2/") }
    }
    mavenCentral()
}

ext {
    testGpgHomeProp = layout.buildDirectory.dir("actions-gpg-home")
    builtOn = project.getProviders().provider(() -> LocalDate.now().toString());
    appVersion = project.getProviders().gradleProperty("version")
}

dependencies {
    implementation     (libs.compress)
    implementation     (libs.hash4j)
    implementation     (libs.picocli)
    implementation     (libs.slf4j)

    compileOnly        (libs.jspecify)

    testImplementation (libs.bundles.testUnit)
}

tasks.register('makeActionsDockerImage') {
    def injected = project.objects.newInstance(Injected)
    doFirst {
        copy {
            into "build/actions-docker"
            from "src/actions"
            from ("src/test/data/gpghome") {
                include "*.asc"
            }
        }
        injected.execOps.exec {
            commandLine("podman", "build", "-t", "actions-backup", "build/actions-docker")
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    
    withJavadocJar()
    withSourcesJar()
}

tasks.named('compileJava').configure {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

tasks.named('compileTestJava').configure {
    options.encoding = 'UTF-8'
}

tasks.named('processResources').configure {
    def capturedAppVersion = appVersion
    def capturedBuiltOn = builtOn
    inputs.property("version", capturedAppVersion)
    inputs.property("builtOn", capturedBuiltOn)

    filesMatching("**/backup-version.properties") {
        filter(s -> s
            .replaceAll("version.*", "version = ${capturedAppVersion.get()}")
            .replaceAll("builtOn.*", "builtOn = ${capturedBuiltOn.get()}")
        )
    }
}

tasks.register('prepareActionsGpgTestHome') {
    def injected = project.objects.newInstance(Injected)
    def gpgHome = testGpgHomeProp.get().getAsFile()
    
    inputs.property('gpgHome', gpgHome)

    doFirst {
        gpgHome.mkdirs()
        injected.execOps.exec {
            commandLine("chmod", "og-rxw", gpgHome)
        }
        injected.execOps.exec {
            commandLine("gpg", "--homedir", gpgHome, "--import", "src/test/data/gpghome/exported-secret-key.asc")
        }
        injected.execOps.exec {
            commandLine("gpg", "--homedir", gpgHome, "--import-ownertrust", "src/test/data/gpghome/exported-owner-trust.asc")
        }
    }
}

tasks.named('test').configure {
    dependsOn(prepareActionsGpgTestHome)
    useJUnitPlatform {
        excludeTags "accept"
    }  

    testLogging.showStandardStreams = false
}

tasks.register('acceptTest', Test) {
    mustRunAfter(test)
    dependsOn(prepareActionsGpgTestHome)

    testClassesDirs = testing.suites.test.sources.output.classesDirs
    classpath = testing.suites.test.sources.runtimeClasspath

    useJUnitPlatform {
        includeTags "accept"
    }

    testLogging.showStandardStreams = true
}

tasks.named('check').configure {
    dependsOn(acceptTest)
    finalizedBy jacocoTestReport // report is always generated after tests run
}

tasks.register('preCommit') {
    dependsOn('check')
    dependsOn('javadoc')
}

tasks.named('jacocoTestReport').configure {
    reports {
        xml.required.set(true)
    }
    dependsOn acceptTest // tests are required to run before generating the report
}

tasks.named('jar').configure {
    manifest {
        attributes(
            'Git-Hash' : (System.getenv('BUILD_SOURCEVERSION') ?: "no-version"),
            'Implementation-Version' : project.version,
            'Main-Class' : "dk.mada.backup.cli.CliMain"
        )
    }
    archiveBaseName = "backup"
}

tasks.named('shadowJar').configure {
    archiveClassifier = ""
    archiveFileName = "backup-shadow.jar"
}

tasks.named('clean').configure { delete("dist") }

tasks.named('eclipseClasspath').configure {
    dependsOn('cleanEclipseClasspath')
}


tasks.register('buildNative', Exec) {
    dependsOn('jar')
    doFirst {
        project.delete("build/backup")
    }
    commandLine 'native-image', '-cp', sourceSets.main.getRuntimeClasspath().getAsPath(), "dk.mada.backup.cli.CliMain", "build/backup"
}
