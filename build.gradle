plugins {
    id 'eclipse'
    id 'jacoco'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'

    id 'dk.mada.style' version '1.0.0'
    id 'dk.mada.reproducible' version '1.0.2'
}

group "${groupId}"

repositories {
    repositories {
        maven { url = uri("https://plugins.gradle.org/m2/") }
    }
    mavenCentral()
}

ext {
    successMarker = project.file("build/all-tests-passed")
    builtOn = LocalDateTime.now()
                .atZone(ZoneId.of('Europe/Copenhagen'))
                .withNano(0)
    testGpgHome = project.file("build/actions-gpg-home")
}

dependencies {
    implementation 'org.slf4j:slf4j-jdk14:2.0.13'
    implementation 'org.apache.commons:commons-compress:1.26.2'
    implementation 'info.picocli:picocli:4.7.6'

    compileOnly    'org.jspecify:jspecify:1.0.0'

    testImplementation  platform('org.junit:junit-bom:5.10.3')
    testImplementation  'org.junit.jupiter:junit-jupiter'
    testImplementation  'org.junit.jupiter:junit-jupiter-params'
    testImplementation  'org.junit.jupiter:junit-jupiter-engine'
    testImplementation  'org.junit.jupiter:junit-jupiter-api'
    testImplementation  'org.junit.platform:junit-platform-runner'
    testImplementation  "org.assertj:assertj-core:3.26.3"
    
    testImplementation  'software.amazon.cryptools:AmazonCorrettoCryptoProvider:2.4.1:linux-x86_64'
    testImplementation  'com.dynatrace.hash4j:hash4j:0.18.0'
}

task makeActionsDockerImage() {
    doFirst {
        copy {
            into "build/actions-docker"
            from "src/actions"
            from ("src/test/data/gpghome") {
                include "*.asc"
            }
        }
         project.exec {
            commandLine("podman", "build", "-t", "actions-backup", "build/actions-docker")
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

processResources {
    inputs.property("version", project.version)
    inputs.property("builtOn", builtOn)

    filesMatching("**/backup-version.properties") {
        filter(s -> s
            .replaceAll("version.*", "version = ${project.version}")
            .replaceAll("builtOn.*", "builtOn = ${builtOn}")
        )
    }
}

task prepareActionsGpgTestHome() {
    doFirst {
        project.mkdir(testGpgHome)
        project.exec {
            commandLine("chmod", "og-rxw",testGpgHome)
        }
        project.exec {
            commandLine("gpg", "--homedir", testGpgHome, "--import", "src/test/data/gpghome/exported-secret-key.asc")
        }
        project.exec {
            commandLine("gpg", "--homedir", testGpgHome, "--import-ownertrust", "src/test/data/gpghome/exported-owner-trust.asc")
        }
    }
}

task makeSuccessMarker() {
    doFirst {
        project.mkdir("build")
        successMarker.createNewFile()
    }
}

test {
    dependsOn(makeSuccessMarker)
    dependsOn(prepareActionsGpgTestHome)
    useJUnitPlatform {
        excludeTags "accept"
    }  
    ignoreFailures = true

    testLogging.showStandardStreams = false

    afterTest { td, tr ->
        if (tr.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
            successMarker.delete()
        }
    }
}

task acceptTest(type: Test) {
    shouldRunAfter(test)
    dependsOn(makeSuccessMarker)
    dependsOn(prepareActionsGpgTestHome)

    testClassesDirs = testing.suites.test.sources.output.classesDirs
    classpath = testing.suites.test.sources.runtimeClasspath

    useJUnitPlatform {
        includeTags "accept"
    }
    ignoreFailures = true

    testLogging.showStandardStreams = false

    afterTest { td, tr ->
        if (tr.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
            successMarker.delete()
        }
    }
}

tasks.check {
    dependsOn(acceptTest)
    finalizedBy jacocoTestReport // report is always generated after tests run
    doLast {
        if (!successMarker.exists()) {
            throw new IllegalStateException("Tests failed")
        }
    }
}

jacocoTestReport {
    reports {
        xml.required.set(true)
    }
    dependsOn acceptTest // tests are required to run before generating the report
}

jar {
    manifest {
        attributes(
            'Git-Hash' : (System.getenv('BUILD_SOURCEVERSION') ?: "no-version"),
            'Implementation-Version' : project.version,
            'Main-Class' : "dk.mada.backup.cli.CliMain"
        )
    }
    archiveBaseName = "backup"
}

shadowJar {
    archiveClassifier = ""
    archiveFileName = "backup-shadow.jar"
}

tasks.clean { delete("dist") }

tasks.eclipseClasspath.dependsOn("cleanEclipseClasspath")


task buildNative(type: Exec, dependsOn: jar) {
    doFirst {
        project.delete("build/backup")
    }
    commandLine 'native-image', '-cp', sourceSets.main.getRuntimeClasspath().getAsPath(), "dk.mada.backup.cli.CliMain", "build/backup"
}
