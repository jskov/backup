plugins {
    id 'eclipse'
    id 'java'
}

def declaredVersion = System.getenv("BUILD_SOURCEBRANCH")
if (declaredVersion != null && declaredVersion.startsWith("refs/tags/")) {
	rootProject.version = declaredVersion.substring(10)
} else {
	version = "1-SNAPSHOT"
}
println "Builds version $version"


group = "dk.mada.backup"

repositories {
     mavenCentral()
}

dependencies {
	implementation 'org.slf4j:slf4j-api:1.8.0-beta4'
	implementation 'ch.qos.logback:logback-classic:1.3.0-alpha4'
	implementation 'org.apache.commons:commons-compress:1.18'
	implementation "com.beust:jcommander:1.72"

    testCompile "org.assertj:assertj-core:3.11.1"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
}

task makeAzureDockerImage() {
	doFirst {
		copy {
			into "build/azure-docker"
			from "src/azure"
			from ("src/test/data/gpghome") {
				include "*.asc"
			}
		}
	 	project.exec {
			commandLine("docker", "build", "-t", "azure-backup", "build/azure-docker")
		}
	}
}

task prepareAzureGpgTestHome() {
	doFirst {
		project.mkdir("build/azure-gpg-home")
	 	project.exec {
			commandLine("gpg", "--homedir", "build/azure-gpg-home", "--import", "src/test/data/gpghome/exported-secret-key.asc")
		}
	 	project.exec {
			commandLine("gpg", "--homedir", "build/azure-gpg-home", "--import-ownertrust", "src/test/data/gpghome/exported-owner-trust.asc")
		}
	}
}

test {
	dependsOn(prepareAzureGpgTestHome)
    useJUnitPlatform {
        excludeTags "accept"
    }  
    ignoreFailures = false
}

task acceptTest(type: Test) {
	dependsOn(prepareAzureGpgTestHome)
    useJUnitPlatform {
  	    includeTags "accept"
    }
    ignoreFailures = false
}

acceptTest.shouldRunAfter("test")
tasks.check.dependsOn(acceptTest)

jar {
	manifest {
		attributes(
			'Git-Hash' : (System.getenv('BUILD_SOURCEVERSION') ?: "no-version"),
			'Version' : version			
		)
	}
	destinationDir = file("dist")
	archiveBaseName = "backup"
}

task release(dependsOn: ["check", "jar"]) {
	doLast {
		println "Release $version"
//		println "See vars " + System.getenv()
	}
}

sourceCompatibility = 11
targetCompatibility = 11

tasks.clean { delete("dist") }

tasks.eclipseClasspath.dependsOn("cleanEclipseClasspath")
