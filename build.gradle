plugins {
    id 'eclipse'
    id 'java'
}

group = "dk.mada.backup"
version = "1-SNAPSHOT"

repositories {
     mavenCentral()
}

dependencies {
	implementation 'org.slf4j:slf4j-api:1.8.0-beta4'
	implementation 'ch.qos.logback:logback-classic:1.3.0-alpha4'
	implementation 'org.apache.commons:commons-compress:1.18'

    testCompile "org.assertj:assertj-core:3.11.1"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
}

task makeAzureDockerImage() {
	doFirst {
		copy {
			into "build/azure-docker"
			from "src/azure"
			from ("src/test/data/gpghome") {
				include "*.asc"
			}
		}
	 	project.exec {
			commandLine("docker", "build", "-t", "azure-backup", "build/azure-docker")
		}
	}
}

task prepareAzureGpgTestHome() {
	doFirst {
		project.mkdir("build/azure-gpg-home")
	 	project.exec {
			commandLine("gpg", "--homedir", "build/azure-gpg-home", "--import", "src/test/data/gpghome/exported-secret-key.asc")
		}
	 	project.exec {
			commandLine("gpg", "--homedir", "build/azure-gpg-home", "--import-ownertrust", "src/test/data/gpghome/exported-owner-trust.asc")
		}
	}
}

test {
	dependsOn(prepareAzureGpgTestHome)
    useJUnitPlatform {
        excludeTags "accept"
    }  
    ignoreFailures = true
    
    doLast {
    	project.fileTree(dir: "build/test-results", include: "**/TEST-*.xml").each {
    		project.logger.lifecycle(it.text)
		}
    }
}

task acceptTest(type: Test) {
	dependsOn(prepareAzureGpgTestHome)
    useJUnitPlatform {
  	    includeTags "accept"
    }
    ignoreFailures = true
}

acceptTest.shouldRunAfter("test")
//tasks.check.dependsOn(acceptTest) -- disable while figuring out gpg azure problem

sourceCompatibility = 11
targetCompatibility = 11

tasks.eclipseClasspath.dependsOn("cleanEclipseClasspath")
